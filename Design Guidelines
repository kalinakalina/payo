
Content is user-generated and unverified.
1
Payoneer Mobile App Design System
1. Foundation Layer
Color System
Primary Colors

✅ primary: 
#FF4800 - bright vermilion, Payoneer's official brand color
✅ gradient-ring: Multi-stop rainbow gradient for decorative arcs and loaders
#ff4700→#eaa300→#ccd90d→#66db4a→#1cd293→#069fdf→#6574e7→#dd53c5→#ef4c5b
Semantic Colors

✅ success: 
#1CD293 - vivid teal (sampled from gradient ring at 0°)
✅ warning: 
#EAA300 - golden yellow (sampled from ring at 270°)
✅ error: 
#EF4C5B - warm red (sampled from ring at 120°)
✅ info: 
#069FDF - bright sky blue (sampled from ring at 30°)
Neutral Colors

✅ background: 
#FFFFFF - pure white for screen 
✅ surfaceElevated: 
#FFFFFF - pure white for elevated cards/headers
✅ border: 
#E0E0E0 - neutral grey for dividers and separators
✅ textPrimary: 
#252526 - dark grey-black for main headlines and amounts
✅ textSecondary: 
#6F6F70 - medium grey for subtitles and helper text
✅ disabled: 
#B6B6B6 - light neutral for disabled states
✅ overlay: rgba(0,0,0,0.4) - semi-transparent black for modal backdrops
Typography
Primary Font Family

✅ Primary: "Avenir Next World" (preferred for all communications)
Demi Bold: Headlines, sub-headers, pull-quotes, captions
Regular: All body copy
Italic variants: Available for both weights
Fallback Font Families

✅ International: "Noto Sans" (when Avenir Next World doesn't support the language)
Bold and Bold Italic available
✅ Video/External: "Montserrat" (for video intros and external packages)
Bold, SemiBold, Medium, Regular (all with italic variants)
✅ PowerPoint: "Avenir Next LT Pro" (free on Microsoft font library)
Typography Usage Guidelines

✅ Text Color: Primary 
#252526 on white backgrounds, white on black backgrounds
✅ Alignment: Left or center aligned (avoid right alignment)
✅ Tracking: Keep at default (0) - don't adjust tracking
✅ Leading: Use default settings, avoid too tight or too loose spacing
✅ Gradient Text: Selective use of brand gradient colors in headlines only (adjacent words only, single gradient across words)
Spacing System
Base Unit

 Base spacing unit (usually 4px, 8px, or 16px)
Spacing Scale

 4px, 8px, 12px, 16px, 24px, 32px, 48px, 64px (document actual scale)
Layout Spacing

 Visual Design

Premium card design with 3D perspective tilt that responds to mouse/touch movement
Glassmorphism effects on headers and navigation with backdrop blur
Enhanced shadow system with multiple layers for realistic depth
Smooth gradient animations including a shimmer effect on the accent bar
Refined color palette with hover/active states and better contrast

Micro-interactions

Ripple effects on all buttons for tactile feedback
Smooth page transitions with slide and fade animations
Floating animations on UI elements like the caret indicator
Pulse animations on status indicators
Haptic-like feedback on toggle selections

Form Enhancements

Beautiful focus states with colored borders and shadow rings
Smooth field transitions that scale slightly on focus
Better placeholder styling and helper text
Toggle switches with checkmark indicators when selected

Motion Design

Staggered animations when switching between chip selections
Loading spinner between screen transitions
Hover transformations on all interactive elements
Spring-based easing curves for natural movement

Modern UI Patterns

Elevated surfaces with subtle borders and shadows
Contemporary spacing and padding for better visual hierarchy
Refined typography with improved letter spacing
Gradient overlays for depth and visual interest



## Guide to Creating Premium Micro-Interactions

### Core Philosophy
Micro-interactions should feel **natural, responsive, and delightful**. They provide immediate feedback that the interface is alive and responding to the user.

### Essential CSS Properties for Smooth Interactions

```css
/* Always use cubic-bezier for natural motion */
transition: all 0.2s cubic-bezier(0.2, 0, 0, 1);
/* This creates Apple-like smooth deceleration */
```

### The Three-State Pattern

Every interactive element needs three states:

#### 1. **Hover State** (Desktop)
```css
.element:hover {
  /* Subtle changes that invite clicking */
  transform: translateY(-2px);  /* Slight lift */
  box-shadow: 0 4px 12px rgba(0,0,0,0.08);  /* Soft shadow */
  background: rgba(0,0,0,0.03);  /* Barely visible highlight */
}
```

#### 2. **Active/Pressed State**
```css
.element:active {
  /* Shows the element is being pressed */
  transform: scale(0.98);  /* Slight shrink - NOT too much! */
  box-shadow: 0 1px 3px rgba(0,0,0,0.12);  /* Shadow pulls in */
}
```

#### 3. **Focus State** (Accessibility)
```css
.element:focus-visible {
  outline: 2px solid rgba(0,122,255,0.5);
  outline-offset: 2px;
}
```

### Mobile-First Touch Interactions

```javascript
// Proper touch handling for mobile
element.addEventListener('touchstart', function() {
  this.style.transform = 'scale(0.98)';
});

element.addEventListener('touchend', function() {
  // Delay return to normal for better feel
  setTimeout(() => {
    this.style.transform = '';
  }, 100);
});
```

### Button/Card Press Pattern

```css
.card {
  transition: all 0.3s cubic-bezier(0.2,0,0,1);
  cursor: pointer;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.08);
}

.card:active {
  transform: scale(0.98);
  box-shadow: 0 2px 8px rgba(0,0,0,0.06);
}
```

### Navigation Item Pattern

```css
.nav-item {
  transition: all 0.2s ease;
  position: relative;
  cursor: pointer;
}

.nav-item:hover {
  background: rgba(0,0,0,0.03);
}

.nav-item:active {
  transform: scale(0.95);
  background: rgba(0,0,0,0.05);
}

/* Active state indicator */
.nav-item.active {
  /* Different from hover/press states */
  color: #007AFF;
  font-weight: 600;
}
```

### Icon Interactions

```css
.icon {
  transition: all 0.2s cubic-bezier(0.2,0,0,1);
}

.icon:hover {
  opacity: 0.8;
  transform: scale(1.05);
}

.icon:active {
  transform: scale(0.92);
  opacity: 1;
}
```

### Critical Rules

1. **Timing is Everything**
   - Hover: 0.2s - 0.3s
   - Active: Instant response
   - Return to normal: 0.1s - 0.15s

2. **Scale Values**
   - Hover lift: `translateY(-2px)` max
   - Active scale: `0.95` to `0.98` (never below 0.95)
   - Icon hover scale: `1.05` to `1.1` max

3. **Shadow Progression**
   ```css
   /* Normal → Hover → Active */
   /* Subtle → Elevated → Pressed */
   box-shadow: 0 1px 3px rgba(0,0,0,0.04);  /* Normal */
   box-shadow: 0 4px 12px rgba(0,0,0,0.08); /* Hover */
   box-shadow: 0 1px 3px rgba(0,0,0,0.06);  /* Active */
   ```

4. **Remove Browser Defaults**
   ```css
   -webkit-tap-highlight-color: transparent;
   -webkit-touch-callout: none;
   user-select: none;
   ```

### Visual Feedback Hierarchy

1. **Primary Actions** (Buttons, Cards)
   - Use transform + shadow changes
   - More dramatic feedback

2. **Secondary Actions** (Nav items, icons)
   - Subtle opacity/background changes
   - Minimal transform

3. **Tertiary Actions** (Text links)
   - Opacity or color change only
   - No transform

### Common Mistakes to Avoid

❌ **Don't**:
- Use `scale(0.9)` or lower - feels broken
- Make hover states too dramatic
- Forget the return transition
- Use linear timing functions
- Add delays to active states

✅ **Do**:
- Keep transforms subtle
- Layer multiple properties
- Test on actual devices
- Use `transform` for performance
- Provide immediate feedback

### Example: Complete Interactive Element

```css
.interactive-element {
  /* Base state */
  background: white;
  border-radius: 12px;
  padding: 16px;
  cursor: pointer;
  transform: translateZ(0); /* Hardware acceleration */
  transition: all 0.3s cubic-bezier(0.2, 0, 0, 1);
  box-shadow: 0 1px 3px rgba(0,0,0,0.04);
}

/* Hover - inviting */
.interactive-element:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}

/* Active - pressed */
.interactive-element:active {
  transform: scale(0.98);
  box-shadow: 0 1px 3px rgba(0,0,0,0.06);
  transition-duration: 0.1s; /* Faster for press */
}

/* Focus - accessible */
.interactive-element:focus-visible {
  outline: 2px solid #007AFF;
  outline-offset: 2px;
}
```

### The Secret Sauce

The magic is in the **combination** of:
- Smooth cubic-bezier timing
- Layered property changes
- Appropriate scale values
- Immediate active feedback
- Slightly delayed release

Make it feel like a real button that responds to pressure, not a digital switch. Users should feel the interface responding to their touch.






css
:root {
  /* Brand Colors */
  --primary: #FF4800;
  
  /* Semantic Colors */
  --success: #1CD293;
  --warning: #EAA300;
  --error: #EF4C5B;
  --info: #069FDF;
  
  /* Neutrals */
  --background: #FFFFFF;
  --surface-elevated: #F5F5F5;
  --border: #E0E0E0;
  --text-primary: #252526;
  --text-secondary: #6F6F70;
  --disabled: #B6B6B6;
  --overlay: rgba(0,0,0,0.4);
  
  /* Typography */
  --font-primary: "Avenir Next World", -apple-system, BlinkMacSystemFont, sans-serif;
  --font-fallback: "Noto Sans", system-ui, sans-serif;
  --font-secondary: "Montserrat", sans-serif;
}
Tailwind Custom Classes

js
// tailwind.config.js additions
module.exports = {
  theme: {
    extend: {
      colors: {
        'payoneer': {
          'primary': '#FF4800',
          'success': '#1CD293',
          'warning': '#EAA300',
          'error': '#EF4C5B',
          'info': '#069FDF',
        },
        'neutral': {
          'background': '#FFFFFF',
          'elevated': '#F5F5F5',
          'border': '#E0E0E0',
          'text': '#252526',
          'text-secondary': '#6F6F70',
          'disabled': '#B6B6B6',
        }
      },
      fontFamily: {
        'payoneer': ['Avenir Next World', 'Noto Sans', 'Montserrat', 'sans-serif'],
      }
    }
  }
}

### React Component Patterns
*We'll document the standard component structures and props that maintain consistency*

---

## Assets Inventory

### Available & Documented ✅
✅ **Complete color palette** with hex codes and usage guidelines
✅ **Typography specifications** with font hierarchies and usage rules  
✅ **Iconography folder** (Level 1 & Level 2 icons organized)
✅ **Screenshots folder** (actual app screens for reference)
✅ **Planner per screen folder** (screen-specific planning materials)
✅ **React component library structure** (from previous design system work)

### Ready for Testing 🚀
With the complete color and typography specifications now documented, we can:

1. **Build new Payoneer-style screens** using only these design tokens
2. **Test consistency** - can AI maintain perfect visual alignment with existing screens?
3. **Validate your core hypothesis** - does "design system first" create better consistency than "build from scratch"?

### Next Steps for Full System
- [ ] Extract spacing measurements from screenshots
- [ ] Document component behavior patterns (buttons, forms, cards)
- [ ] Map animation/transition specifications
- [ ] Create interactive component demos

